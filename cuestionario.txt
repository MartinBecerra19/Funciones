1. ¿Qué lenguaje es directamente ejecutable por la computadora? 
    a. Fuente. 
    b. Máquina. <= CORRECTA   
    c. Ensamblador. 
    d. Objeto

2. Tener deficiencias en la fase de _______ es la principal causa del gran porcentaje de fracasos de los proyectos software. 
    a. Diseño 
    b. Codificación 
    c. Documentación 
    d. Análisis <= CORRECTA

3. El modelo en cascada con realimentación es 
    a. El modelo perfecto si los requisitos están claros y el proyecto es rígido <= CORRECTA
    b. El modelo idóneo si se prevén muchos cambios durante el desarrollo. 
    c. Es el modelo de vida clásico del software. 
    d. Es un tipo de modelo evolutivo

4. El modelo en espiral 
    a. Se trata de varios ciclos en cascada que se repiten y se refinan en cada incremento. <= CORRECTA
    b. Se divide en 6 zonas, llamadas regiones de tareas. 
    c. Es un modelo bastante sencillo. 
    d. Es un modelo rígido que permite pocos cambios.

5. Que plugins tienes instalados en Visual Studio Code y cual es su función.
1- JavaScript (ES6) code snippets : permite reutilizar partes de código ya empleadas y declaradas previamente
2- Node Exec : permite ejecutar un fichero sin necesidad de abrir un terminal, simplemente pulsando la tecla F8 
		mostrando la salida de pantalla

6. Describe los pasos para realizar la depuración de un programa.
1- Abrimos el archivo que vamos a estudiar
2- Pulsamos la opción del depurador dentro del entorno que estemos empleando (Visual Studio Code en nuestro caso)
3- Seleccionamos la opción de configuración para crear el archivo launch.json y la consiguiente carpeta .vscode
4- Selecionamos el lugar el en el que deseamos situar el break point o punto de interrupción 
	(punto que seleccionamos y a partir del cual el fichero se empezaría a ejecutar paso a paso)
5- Añadimos variables de inspección para controlar los valores que obtengamos en ciertas variables a estudiar
6- Ejecutamos el archivo
7. Hacer una captura de pantalla, con la ejecución de la función piramide(10), cuando el valor de i sea igual a 5. Mostrar tambien el contenido de la variable línea (para i=5) justo antes de hacer el console.log(linea)
